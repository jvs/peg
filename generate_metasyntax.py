from sourcer import Grammar


description = r'''
    ignored token Space = @/[ \t]+/
    token Word = @/[_a-zA-Z][_a-zA-Z0-9]*/

    token Symbol = (
        @/<\||\|>|<<\!|\!>>|<<|>>|=>|\/\/|[=;,:\|\/\*\+\?\!\(\)\[\]\{\}]/
    )

    token StringLiteral = (
        @/(?s)("""([^\\]|\\.)*?""")/
        | @/(?s)('\''([^\\]|\\.)*?'\'')/
        | @/("([^"\\]|\\.)*")/
        | @/('([^'\\]|\\.)*')/
    )

    token RegexLiteral = @/\@\/([^\/\\]|\\.)*\//
    token Newline = @/[\r\n][\s]*/

    token PythonSection = @/(?s)```.*?```/
    token PythonExpression = @/`[^`\n]*`/

    ignored token Comment = @/#[^\r\n]*/

    Sep = Some(Newline | ";")
    Name = Word

    template wrap(x) => Skip(Newline) >> x << Skip(Newline)

    Comma = wrap(",")

    class RuleDef {
        is_ignored: ("ignore" | "ignored")?
        name: Name << ("=" | ":")
        expr: Expr
    }

    class ClassDef {
        name: "class" >> Name
        fields: wrap("{") >> (RuleDef / Sep) << "}"
    }

    class TokenDef {
        is_ignored: ("ignore" | "ignored")?
        child: "token" >> (ClassDef | RuleDef)
    }

    class TemplateDef {
        name: "template" >> Name
        params: wrap("(") >> (wrap(Name) / Comma) << ")"
        expr: wrap("=" | ":" | "=>") >> Expr
    }

    Stmt = TokenDef
        | ClassDef
        | TemplateDef
        | RuleDef
        | PythonSection
        | PythonExpression

    class Ref {
        name: Word
    }

    class ListLiteral {
        elements: "[" >> (wrap(Expr) / Comma) << "]"
    }

    Atom = ("(" >> wrap(Expr) << ")")
        | Ref
        | StringLiteral
        | RegexLiteral
        | ListLiteral
        | PythonExpression

    class KeywordArg {
        name: Name << ("=" | ":")
        expr: Expr
    }

    class ArgList {
        args: "(" >> (wrap(KeywordArg | Expr) / Comma) << ")"
    }

    Expr = OperatorPrecedence(
        Atom,
        Postfix(ArgList),
        Postfix("?" | "*" | "+" | "!"),
        LeftAssoc(wrap("/" | "//")),
        LeftAssoc(wrap("<<" | ">>" | "<<!" | "!>>")),
        LeftAssoc(wrap("<|" | "|>")),
        LeftAssoc(wrap("|")),
    )

    # TODO: Implement `End`.
    start = Skip(Newline) >> (Stmt / Sep) # << End
'''

grammar = Grammar(description, include_source=True)

with open('sourcer/meta.py', 'w') as f:
    f.write('# Generated by ../generate_metasyntax.py\n')
    f.write(grammar._source_code)

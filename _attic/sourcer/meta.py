# Generated by ../generate_metasyntax.py
from goto import with_goto as _with_goto
import re

import ast
import textwrap


class Node:
    _fields = ()

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for field in self._fields:
            if getattr(self, field) != getattr(other, field):
                return False
        return True

    def _asdict(self):
        return {k: getattr(self, k) for k in self._fields}

    def _replace(self, **kw):
        for field in self._fields:
            if field not in kw:
                kw[field] = getattr(self, field)
        return self.__class__(**kw)

_pattern1 = re.compile('[ \\t]+')
_pattern2 = re.compile('#[^\\r\\n]*')
_pattern3 = re.compile('[\\r\\n][\\s]*')
_pattern4 = re.compile('[_a-zA-Z][_a-zA-Z0-9]*')

class StringLiteral(Node):
    _fields = ('value',)

    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return f'StringLiteral(value={self.value!r})'

_pattern5 = re.compile('(?s)("""([^\\\\]|\\\\.)*?""")')
_pattern6 = re.compile("(?s)('''([^\\\\]|\\\\.)*?''')")
_pattern7 = re.compile('("([^"\\\\]|\\\\.)*")')
_pattern8 = re.compile("('([^'\\\\]|\\\\.)*')")

class RegexLiteral(Node):
    _fields = ('value',)

    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return f'RegexLiteral(value={self.value!r})'

_pattern9 = re.compile('\\@\\/([^\\/\\\\]|\\\\.)*\\/')

class PythonSection(Node):
    _fields = ('value',)

    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return f'PythonSection(value={self.value!r})'

_pattern10 = re.compile('(?s)```.*?```')

class PythonExpression(Node):
    _fields = ('value',)

    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return f'PythonExpression(value={self.value!r})'

_pattern11 = re.compile('`.*?`')

class RuleDef(Node):
    _fields = ('is_ignored', 'name', 'params', 'expr')

    def __init__(self, is_ignored, name, params, expr):
        self.is_ignored = is_ignored
        self.name = name
        self.params = params
        self.expr = expr

    def __repr__(self):
        return f'RuleDef(is_ignored={self.is_ignored!r}, name={self.name!r}, params={self.params!r}, expr={self.expr!r})'


class ClassDef(Node):
    _fields = ('name', 'params', 'fields')

    def __init__(self, name, params, fields):
        self.name = name
        self.params = params
        self.fields = fields

    def __repr__(self):
        return f'ClassDef(name={self.name!r}, params={self.params!r}, fields={self.fields!r})'


class LetExpression(Node):
    _fields = ('name', 'expr', 'body')

    def __init__(self, name, expr, body):
        self.name = name
        self.expr = expr
        self.body = body

    def __repr__(self):
        return f'LetExpression(name={self.name!r}, expr={self.expr!r}, body={self.body!r})'


class Ref(Node):
    _fields = ('value',)

    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return f'Ref(value={self.value!r})'


class ListLiteral(Node):
    _fields = ('elements',)

    def __init__(self, elements):
        self.elements = elements

    def __repr__(self):
        return f'ListLiteral(elements={self.elements!r})'


class KeywordArg(Node):
    _fields = ('name', 'expr')

    def __init__(self, name, expr):
        self.name = name
        self.expr = expr

    def __repr__(self):
        return f'KeywordArg(name={self.name!r}, expr={self.expr!r})'


class ArgList(Node):
    _fields = ('args',)

    def __init__(self, args):
        self.args = args

    def __repr__(self):
        return f'ArgList(args={self.args!r})'


class ParseError(Exception):
    def __init__(self, expr_code, pos):
        self.expr_code = expr_code
        self.pos = pos


class Infix(Node):
    _fields = ('left', 'operator', 'right')

    def __init__(self, left, operator, right):
        self.left = left
        self.operator = operator
        self.right = right

    def __repr__(self):
        return f'Infix({self.left!r}, {self.operator!r}, {self.right!r})'


class Postfix(Node):
    _fields = ('left', 'operator')

    def __init__(self, left, operator):
        self.left = left
        self.operator = operator

    def __repr__(self):
        return f'Postfix({self.left!r}, {self.operator!r})'


class Prefix(Node):
    _fields = ('operator', 'right')

    def __init__(self, operator, right):
        self.operator = operator
        self.right = right

    def __repr__(self):
        return f'Prefix({self.operator!r}, {self.right!r})'


def parse(text, pos=0):
    return _run(text, pos, _skip_then_start)


from collections import namedtuple as _nt

class _RuleClosure(_nt('_RuleClosure', 'rule, args, kwargs')):
    def __call__(self, _text, _pos):
        return self.rule(_text, _pos, *self.args, **dict(self.kwargs))


class _StringLiteral(str):
    def __call__(self, _text, _pos):
        return self._parse_function(_text, _pos)


def _run(text, pos, start):
    memo = {}
    result = None

    key = (3, start, pos)
    gtor = start(text, pos)
    stack = [(key, gtor)]

    while stack:
        key, gtor = stack[-1]
        result = gtor.send(result)

        if result[0] != 3:
            stack.pop()
            memo[key] = result
        elif result in memo:
            result = memo[result]
        else:
            gtor = result[1](text, result[2])
            stack.append((result, gtor))
            result = None

    if result[0]:
        return result[1]
    else:
        raise ParseError(result[1], result[2])


def visit(node):
    if isinstance(node, list):
        yield from node

    elif isinstance(node, Node):
        yield node

        if hasattr(node, '_fields'):
            for field in node._fields:
                yield from visit(getattr(node, field))


def transform(node, *callbacks):
    if not callbacks:
        return node

    if len(callbacks) == 1:
        callback = callbacks[0]
    else:
        def callback(node):
            for f in callbacks:
                node = f(node)
            return node

    return _transform(node, callback)


def _transform(node, callback):
    if isinstance(node, list):
        return [_transform(x, callback) for x in node]

    if not isinstance(node, Node):
        return node

    updates = {}
    for field in node._fields:
        was = getattr(node, field)
        now = _transform(was, callback)
        if was is not now:
            updates[field] = now

    if updates:
        node = node._replace(**updates)

    return callback(node)


@_with_goto
def _parse_Space1(_text, _pos):
    _match1 = _pattern1.match(_text, _pos)
    if _match1:
        _pos = _match1.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match1.group(0)
    else:
        _mode = False
        _result = 140289060440496
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Comment1(_text, _pos):
    _match2 = _pattern2.match(_text, _pos)
    if _match2:
        _pos = _match2.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match2.group(0)
    else:
        _mode = False
        _result = 140289060332824
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Newline1(_text, _pos):
    _match3 = _pattern3.match(_text, _pos)
    if _match3:
        _pos = _match3.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match3.group(0)
    else:
        _mode = False
        _result = 140289060768848
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Sep1(_text, _pos):
    _staging1 = []
    label ._loop_list1
    _checkpoint1 = _pos
    _backtrack1 = _pos
    _farthest_pos1 = _pos
    _farthest_expr1 = 140289060553672
    _mode, _result, _pos = yield (3, _parse_Newline1, _pos)
    if _mode:
        goto ._end_choice1
    if _farthest_pos1 < _pos:
        _farthest_pos1 = _pos
        _farthest_expr1 = 140289060554736
    _pos = _backtrack1
    _value1 = ';'
    _end1 = _pos + 1
    if _text[_pos:_end1] == _value1:
        _pos = _end1
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value1
    else:
        _mode = False
        _result = 140289060554232
    if _mode:
        goto ._end_choice1
    if _farthest_pos1 < _pos:
        _farthest_pos1 = _pos
        _farthest_expr1 = 140289060554232
    _pos = _backtrack1
    _result = _farthest_expr1
    _pos = _farthest_pos1
    label ._end_choice1
    if _mode:
        _staging1.append(_result)
        goto ._loop_list1
    else:
        _pos = _checkpoint1
        goto ._end_list1
    label ._end_list1
    if _staging1:
        _mode = True
        _result = _staging1
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Name1(_text, _pos):
    _match4 = _pattern4.match(_text, _pos)
    if _match4:
        _pos = _match4.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match4.group(0)
    else:
        _mode = False
        _result = 140289060665440
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Comma1(_text, _pos):
    
    @_with_goto
    def _arg1(_text, _pos):
        _value2 = ','
        _end2 = _pos + 1
        if _text[_pos:_end2] == _value2:
            _pos = _end2
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value2
        else:
            _mode = False
            _result = 140289060977296
        yield (_mode, _result, _pos)

    _wrapper1 = _StringLiteral(',')
    _wrapper1._parse_function = _arg1
    _closure1 = _RuleClosure(_parse_wrap1, (_wrapper1,), ())
    _mode, _result, _pos = yield (3, _closure1, _pos)
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_wrap1(_text, _pos, x):
    _checkpoint2 = _pos
    label ._loop_skip1
    _mode, _result, _pos = yield (3, _parse_Newline1, _pos)
    if _mode:
        _checkpoint2 = _pos
        goto ._loop_skip1
    _mode = True
    _result = None
    _pos = _checkpoint2
    if not _mode:
        goto ._end_discard1
    _mode, _result, _pos = yield (3, x, _pos)
    label ._end_discard1
    if not _mode:
        goto ._end_discard2
    _staging2 = _result
    _checkpoint3 = _pos
    label ._loop_skip2
    _mode, _result, _pos = yield (3, _parse_Newline1, _pos)
    if _mode:
        _checkpoint3 = _pos
        goto ._loop_skip2
    _mode = True
    _result = None
    _pos = _checkpoint3
    if _mode:
        _result = _staging2
    label ._end_discard2
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_kw1(_text, _pos, word):
    _mode, _result, _pos = yield (3, _parse_Name1, _pos)
    if _mode:
        _arg2 = _result
    else:
        goto ._end_where1
    _mode = True
    _result = lambda x: x == word
    if _mode:
        if _result(_arg2):
            _mode = True
            _result = _arg2
        else:
            _mode = False
            _result = 140289061128344
    label ._end_where1
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Params1(_text, _pos):
    
    @_with_goto
    def _arg3(_text, _pos):
        _value3 = '('
        _end3 = _pos + 1
        if _text[_pos:_end3] == _value3:
            _pos = _end3
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value3
        else:
            _mode = False
            _result = 140289068362832
        yield (_mode, _result, _pos)

    _wrapper2 = _StringLiteral('(')
    _wrapper2._parse_function = _arg3
    _closure2 = _RuleClosure(_parse_wrap1, (_wrapper2,), ())
    _mode, _result, _pos = yield (3, _closure2, _pos)
    if not _mode:
        goto ._end_discard3
    _staging3 = []
    _checkpoint4 = _pos
    label ._loop_alt1
    _closure3 = _RuleClosure(_parse_wrap1, (_parse_Name1,), ())
    _mode, _result, _pos = yield (3, _closure3, _pos)
    if not _mode:
        goto ._end_alt1
    _staging3.append(_result)
    _checkpoint4 = _pos
    _mode, _result, _pos = yield (3, _parse_Comma1, _pos)
    if not _mode:
        goto ._end_alt1
    _checkpoint4 = _pos
    goto ._loop_alt1
    label ._end_alt1
    _mode = True
    _result = _staging3
    _pos = _checkpoint4
    label ._end_discard3
    if not _mode:
        goto ._end_discard4
    _staging4 = _result
    _value4 = ')'
    _end4 = _pos + 1
    if _text[_pos:_end4] == _value4:
        _pos = _end4
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value4
    else:
        _mode = False
        _result = 140289061127560
    if _mode:
        _result = _staging4
    label ._end_discard4
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_StringLiteral1(_text, _pos):
    _backtrack2 = _pos
    _farthest_pos2 = _pos
    _farthest_expr2 = 140289069837672
    _match5 = _pattern5.match(_text, _pos)
    if _match5:
        _pos = _match5.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match5.group(0)
    else:
        _mode = False
        _result = 140289069836160
    if _mode:
        goto ._end_choice2
    if _farthest_pos2 < _pos:
        _farthest_pos2 = _pos
        _farthest_expr2 = 140289069836160
    _pos = _backtrack2
    _match6 = _pattern6.match(_text, _pos)
    if _match6:
        _pos = _match6.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match6.group(0)
    else:
        _mode = False
        _result = 140289069835880
    if _mode:
        goto ._end_choice2
    if _farthest_pos2 < _pos:
        _farthest_pos2 = _pos
        _farthest_expr2 = 140289069835880
    _pos = _backtrack2
    _match7 = _pattern7.match(_text, _pos)
    if _match7:
        _pos = _match7.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match7.group(0)
    else:
        _mode = False
        _result = 140289069836216
    if _mode:
        goto ._end_choice2
    if _farthest_pos2 < _pos:
        _farthest_pos2 = _pos
        _farthest_expr2 = 140289069836216
    _pos = _backtrack2
    _match8 = _pattern8.match(_text, _pos)
    if _match8:
        _pos = _match8.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match8.group(0)
    else:
        _mode = False
        _result = 140289069835432
    if _mode:
        goto ._end_choice2
    if _farthest_pos2 < _pos:
        _farthest_pos2 = _pos
        _farthest_expr2 = 140289069835432
    _pos = _backtrack2
    _result = _farthest_expr2
    _pos = _farthest_pos2
    label ._end_choice2
    if not _mode:
        goto ._end_apply1
    __item1 = _result
    _mode = True
    _result = ast.literal_eval
    if _mode:
        _result = _result(__item1)
    label ._end_apply1
    if not _mode:
        goto ._end_sequence1
    value = _result
    _result = StringLiteral(value)
    label ._end_sequence1
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_RegexLiteral1(_text, _pos):
    _match9 = _pattern9.match(_text, _pos)
    if _match9:
        _pos = _match9.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match9.group(0)
    else:
        _mode = False
        _result = 140289069743072
    if not _mode:
        goto ._end_apply2
    __item2 = _result
    _mode = True
    _result = lambda x: x[2:-1]
    if _mode:
        _result = _result(__item2)
    label ._end_apply2
    if not _mode:
        goto ._end_sequence2
    value = _result
    _result = RegexLiteral(value)
    label ._end_sequence2
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_PythonSection1(_text, _pos):
    _match10 = _pattern10.match(_text, _pos)
    if _match10:
        _pos = _match10.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match10.group(0)
    else:
        _mode = False
        _result = 140289069641456
    if not _mode:
        goto ._end_apply3
    __item3 = _result
    _mode = True
    _result = lambda x: textwrap.dedent(x[3:-3])
    if _mode:
        _result = _result(__item3)
    label ._end_apply3
    if not _mode:
        goto ._end_sequence3
    value = _result
    _result = PythonSection(value)
    label ._end_sequence3
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_PythonExpression1(_text, _pos):
    _match11 = _pattern11.match(_text, _pos)
    if _match11:
        _pos = _match11.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match11.group(0)
    else:
        _mode = False
        _result = 140289068895144
    if not _mode:
        goto ._end_apply4
    __item4 = _result
    _mode = True
    _result = lambda x: x[1:-1]
    if _mode:
        _result = _result(__item4)
    label ._end_apply4
    if not _mode:
        goto ._end_sequence4
    value = _result
    _result = PythonExpression(value)
    label ._end_sequence4
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_RuleDef1(_text, _pos):
    _backtrack3 = _pos
    _backtrack4 = _pos
    _farthest_pos3 = _pos
    _farthest_expr3 = 140289060228232
    
    @_with_goto
    def _arg4(_text, _pos):
        _value5 = 'ignored'
        _end5 = _pos + 7
        if _text[_pos:_end5] == _value5:
            _pos = _end5
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value5
        else:
            _mode = False
            _result = 140289060228176
        yield (_mode, _result, _pos)

    _wrapper3 = _StringLiteral('ignored')
    _wrapper3._parse_function = _arg4
    _closure4 = _RuleClosure(_parse_kw1, (_wrapper3,), ())
    _mode, _result, _pos = yield (3, _closure4, _pos)
    if _mode:
        goto ._end_choice3
    if _farthest_pos3 < _pos:
        _farthest_pos3 = _pos
        _farthest_expr3 = 140289060228120
    _pos = _backtrack4
    
    @_with_goto
    def _arg5(_text, _pos):
        _value6 = 'ignore'
        _end6 = _pos + 6
        if _text[_pos:_end6] == _value6:
            _pos = _end6
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value6
        else:
            _mode = False
            _result = 140289060228344
        yield (_mode, _result, _pos)

    _wrapper4 = _StringLiteral('ignore')
    _wrapper4._parse_function = _arg5
    _closure5 = _RuleClosure(_parse_kw1, (_wrapper4,), ())
    _mode, _result, _pos = yield (3, _closure5, _pos)
    if _mode:
        goto ._end_choice3
    if _farthest_pos3 < _pos:
        _farthest_pos3 = _pos
        _farthest_expr3 = 140289060228288
    _pos = _backtrack4
    _result = _farthest_expr3
    _pos = _farthest_pos3
    label ._end_choice3
    if not _mode:
        _mode = True
        _result = None
        _pos = _backtrack3
    if not _mode:
        goto ._end_apply5
    __item5 = _result
    _mode = True
    _result = bool
    if _mode:
        _result = _result(__item5)
    label ._end_apply5
    if not _mode:
        goto ._end_sequence5
    is_ignored = _result
    _mode, _result, _pos = yield (3, _parse_Name1, _pos)
    if not _mode:
        goto ._end_sequence5
    name = _result
    _backtrack5 = _pos
    _mode, _result, _pos = yield (3, _parse_Params1, _pos)
    if not _mode:
        _mode = True
        _result = None
        _pos = _backtrack5
    if not _mode:
        goto ._end_discard5
    _staging5 = _result
    
    @_with_goto
    def _arg6(_text, _pos):
        _backtrack6 = _pos
        _farthest_pos4 = _pos
        _farthest_expr4 = 140289060229016
        _value7 = '=>'
        _end7 = _pos + 2
        if _text[_pos:_end7] == _value7:
            _pos = _end7
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value7
        else:
            _mode = False
            _result = 140289060228848
        if _mode:
            goto ._end_choice4
        if _farthest_pos4 < _pos:
            _farthest_pos4 = _pos
            _farthest_expr4 = 140289060228848
        _pos = _backtrack6
        _value8 = '='
        _end8 = _pos + 1
        if _text[_pos:_end8] == _value8:
            _pos = _end8
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value8
        else:
            _mode = False
            _result = 140289060228904
        if _mode:
            goto ._end_choice4
        if _farthest_pos4 < _pos:
            _farthest_pos4 = _pos
            _farthest_expr4 = 140289060228904
        _pos = _backtrack6
        _value9 = ':'
        _end9 = _pos + 1
        if _text[_pos:_end9] == _value9:
            _pos = _end9
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value9
        else:
            _mode = False
            _result = 140289060228792
        if _mode:
            goto ._end_choice4
        if _farthest_pos4 < _pos:
            _farthest_pos4 = _pos
            _farthest_expr4 = 140289060228792
        _pos = _backtrack6
        _result = _farthest_expr4
        _pos = _farthest_pos4
        label ._end_choice4
        yield (_mode, _result, _pos)

    _closure6 = _RuleClosure(_parse_wrap1, (_arg6,), ())
    _mode, _result, _pos = yield (3, _closure6, _pos)
    if _mode:
        _result = _staging5
    label ._end_discard5
    if not _mode:
        goto ._end_sequence5
    params = _result
    _mode, _result, _pos = yield (3, _parse_Expr1, _pos)
    if not _mode:
        goto ._end_sequence5
    expr = _result
    _result = RuleDef(is_ignored, name, params, expr)
    label ._end_sequence5
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_ClassDef1(_text, _pos):
    
    @_with_goto
    def _arg7(_text, _pos):
        _value10 = 'class'
        _end10 = _pos + 5
        if _text[_pos:_end10] == _value10:
            _pos = _end10
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value10
        else:
            _mode = False
            _result = 140289069457704
        yield (_mode, _result, _pos)

    _wrapper5 = _StringLiteral('class')
    _wrapper5._parse_function = _arg7
    _closure7 = _RuleClosure(_parse_kw1, (_wrapper5,), ())
    _mode, _result, _pos = yield (3, _closure7, _pos)
    if not _mode:
        goto ._end_discard6
    _mode, _result, _pos = yield (3, _parse_Name1, _pos)
    label ._end_discard6
    if not _mode:
        goto ._end_sequence6
    name = _result
    _backtrack7 = _pos
    _mode, _result, _pos = yield (3, _parse_Params1, _pos)
    if not _mode:
        _mode = True
        _result = None
        _pos = _backtrack7
    if not _mode:
        goto ._end_sequence6
    params = _result
    
    @_with_goto
    def _arg8(_text, _pos):
        _value11 = '{'
        _end11 = _pos + 1
        if _text[_pos:_end11] == _value11:
            _pos = _end11
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value11
        else:
            _mode = False
            _result = 140289069458264
        yield (_mode, _result, _pos)

    _wrapper6 = _StringLiteral('{')
    _wrapper6._parse_function = _arg8
    _closure8 = _RuleClosure(_parse_wrap1, (_wrapper6,), ())
    _mode, _result, _pos = yield (3, _closure8, _pos)
    if not _mode:
        goto ._end_discard7
    _staging6 = []
    _checkpoint5 = _pos
    label ._loop_alt2
    _mode, _result, _pos = yield (3, _parse_RuleDef1, _pos)
    if not _mode:
        goto ._end_alt2
    _staging6.append(_result)
    _checkpoint5 = _pos
    _mode, _result, _pos = yield (3, _parse_Sep1, _pos)
    if not _mode:
        goto ._end_alt2
    _checkpoint5 = _pos
    goto ._loop_alt2
    label ._end_alt2
    _mode = True
    _result = _staging6
    _pos = _checkpoint5
    label ._end_discard7
    if not _mode:
        goto ._end_discard8
    _staging7 = _result
    _value12 = '}'
    _end12 = _pos + 1
    if _text[_pos:_end12] == _value12:
        _pos = _end12
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value12
    else:
        _mode = False
        _result = 140289069457760
    if _mode:
        _result = _staging7
    label ._end_discard8
    if not _mode:
        goto ._end_sequence6
    fields = _result
    _result = ClassDef(name, params, fields)
    label ._end_sequence6
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Stmt1(_text, _pos):
    _backtrack8 = _pos
    _farthest_pos5 = _pos
    _farthest_expr5 = 140289069458488
    _mode, _result, _pos = yield (3, _parse_ClassDef1, _pos)
    if _mode:
        goto ._end_choice5
    if _farthest_pos5 < _pos:
        _farthest_pos5 = _pos
        _farthest_expr5 = 140289069458600
    _pos = _backtrack8
    _mode, _result, _pos = yield (3, _parse_RuleDef1, _pos)
    if _mode:
        goto ._end_choice5
    if _farthest_pos5 < _pos:
        _farthest_pos5 = _pos
        _farthest_expr5 = 140289069458656
    _pos = _backtrack8
    _mode, _result, _pos = yield (3, _parse_PythonSection1, _pos)
    if _mode:
        goto ._end_choice5
    if _farthest_pos5 < _pos:
        _farthest_pos5 = _pos
        _farthest_expr5 = 140289069458544
    _pos = _backtrack8
    _mode, _result, _pos = yield (3, _parse_PythonExpression1, _pos)
    if _mode:
        goto ._end_choice5
    if _farthest_pos5 < _pos:
        _farthest_pos5 = _pos
        _farthest_expr5 = 140289069458712
    _pos = _backtrack8
    _result = _farthest_expr5
    _pos = _farthest_pos5
    label ._end_choice5
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_LetExpression1(_text, _pos):
    
    @_with_goto
    def _arg9(_text, _pos):
        _value13 = 'let'
        _end13 = _pos + 3
        if _text[_pos:_end13] == _value13:
            _pos = _end13
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value13
        else:
            _mode = False
            _result = 140289069459216
        yield (_mode, _result, _pos)

    _wrapper7 = _StringLiteral('let')
    _wrapper7._parse_function = _arg9
    _closure9 = _RuleClosure(_parse_kw1, (_wrapper7,), ())
    _mode, _result, _pos = yield (3, _closure9, _pos)
    if not _mode:
        goto ._end_discard9
    _mode, _result, _pos = yield (3, _parse_Name1, _pos)
    label ._end_discard9
    if not _mode:
        goto ._end_discard10
    _staging8 = _result
    
    @_with_goto
    def _arg10(_text, _pos):
        _value14 = '='
        _end14 = _pos + 1
        if _text[_pos:_end14] == _value14:
            _pos = _end14
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value14
        else:
            _mode = False
            _result = 140289069459440
        yield (_mode, _result, _pos)

    _wrapper8 = _StringLiteral('=')
    _wrapper8._parse_function = _arg10
    _closure10 = _RuleClosure(_parse_wrap1, (_wrapper8,), ())
    _mode, _result, _pos = yield (3, _closure10, _pos)
    if _mode:
        _result = _staging8
    label ._end_discard10
    if not _mode:
        goto ._end_sequence7
    name = _result
    _mode, _result, _pos = yield (3, _parse_Expr1, _pos)
    if not _mode:
        goto ._end_discard11
    _staging9 = _result
    
    @_with_goto
    def _arg11(_text, _pos):
        
        @_with_goto
        def _arg12(_text, _pos):
            _value15 = 'in'
            _end15 = _pos + 2
            if _text[_pos:_end15] == _value15:
                _pos = _end15
                _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
                _mode = True
                _result = _value15
            else:
                _mode = False
                _result = 140289069460000
            yield (_mode, _result, _pos)

        _wrapper9 = _StringLiteral('in')
        _wrapper9._parse_function = _arg12
        _closure11 = _RuleClosure(_parse_kw1, (_wrapper9,), ())
        _mode, _result, _pos = yield (3, _closure11, _pos)
        yield (_mode, _result, _pos)

    _closure12 = _RuleClosure(_parse_wrap1, (_arg11,), ())
    _mode, _result, _pos = yield (3, _closure12, _pos)
    if _mode:
        _result = _staging9
    label ._end_discard11
    if not _mode:
        goto ._end_sequence7
    expr = _result
    _mode, _result, _pos = yield (3, _parse_Expr1, _pos)
    if not _mode:
        goto ._end_sequence7
    body = _result
    _result = LetExpression(name, expr, body)
    label ._end_sequence7
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Ref1(_text, _pos):
    _mode, _result, _pos = yield (3, _parse_Name1, _pos)
    if not _mode:
        goto ._end_sequence8
    value = _result
    _result = Ref(value)
    label ._end_sequence8
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_ListLiteral1(_text, _pos):
    _value16 = '['
    _end16 = _pos + 1
    if _text[_pos:_end16] == _value16:
        _pos = _end16
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value16
    else:
        _mode = False
        _result = 140289069460336
    if not _mode:
        goto ._end_discard12
    _staging10 = []
    _checkpoint6 = _pos
    label ._loop_alt3
    _closure13 = _RuleClosure(_parse_wrap1, (_parse_Expr1,), ())
    _mode, _result, _pos = yield (3, _closure13, _pos)
    if not _mode:
        goto ._end_alt3
    _staging10.append(_result)
    _checkpoint6 = _pos
    _mode, _result, _pos = yield (3, _parse_Comma1, _pos)
    if not _mode:
        goto ._end_alt3
    _checkpoint6 = _pos
    goto ._loop_alt3
    label ._end_alt3
    _mode = True
    _result = _staging10
    _pos = _checkpoint6
    label ._end_discard12
    if not _mode:
        goto ._end_discard13
    _staging11 = _result
    _value17 = ']'
    _end17 = _pos + 1
    if _text[_pos:_end17] == _value17:
        _pos = _end17
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value17
    else:
        _mode = False
        _result = 140289069460280
    if _mode:
        _result = _staging11
    label ._end_discard13
    if not _mode:
        goto ._end_sequence9
    elements = _result
    _result = ListLiteral(elements)
    label ._end_sequence9
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Atom1(_text, _pos):
    _backtrack9 = _pos
    _farthest_pos6 = _pos
    _farthest_expr6 = 140289069490360
    _value18 = '('
    _end18 = _pos + 1
    if _text[_pos:_end18] == _value18:
        _pos = _end18
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value18
    else:
        _mode = False
        _result = 140289069461176
    if not _mode:
        goto ._end_discard14
    _closure14 = _RuleClosure(_parse_wrap1, (_parse_Expr1,), ())
    _mode, _result, _pos = yield (3, _closure14, _pos)
    label ._end_discard14
    if not _mode:
        goto ._end_discard15
    _staging12 = _result
    _value19 = ')'
    _end19 = _pos + 1
    if _text[_pos:_end19] == _value19:
        _pos = _end19
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value19
    else:
        _mode = False
        _result = 140289069461120
    if _mode:
        _result = _staging12
    label ._end_discard15
    if _mode:
        goto ._end_choice6
    if _farthest_pos6 < _pos:
        _farthest_pos6 = _pos
        _farthest_expr6 = 140289069461232
    _pos = _backtrack9
    _mode, _result, _pos = yield (3, _parse_LetExpression1, _pos)
    if _mode:
        goto ._end_choice6
    if _farthest_pos6 < _pos:
        _farthest_pos6 = _pos
        _farthest_expr6 = 140289069461064
    _pos = _backtrack9
    _mode, _result, _pos = yield (3, _parse_Ref1, _pos)
    if _mode:
        goto ._end_choice6
    if _farthest_pos6 < _pos:
        _farthest_pos6 = _pos
        _farthest_expr6 = 140289069461008
    _pos = _backtrack9
    _mode, _result, _pos = yield (3, _parse_StringLiteral1, _pos)
    if _mode:
        goto ._end_choice6
    if _farthest_pos6 < _pos:
        _farthest_pos6 = _pos
        _farthest_expr6 = 140289069460952
    _pos = _backtrack9
    _mode, _result, _pos = yield (3, _parse_RegexLiteral1, _pos)
    if _mode:
        goto ._end_choice6
    if _farthest_pos6 < _pos:
        _farthest_pos6 = _pos
        _farthest_expr6 = 140289069460896
    _pos = _backtrack9
    _mode, _result, _pos = yield (3, _parse_ListLiteral1, _pos)
    if _mode:
        goto ._end_choice6
    if _farthest_pos6 < _pos:
        _farthest_pos6 = _pos
        _farthest_expr6 = 140289069460840
    _pos = _backtrack9
    _mode, _result, _pos = yield (3, _parse_PythonExpression1, _pos)
    if _mode:
        goto ._end_choice6
    if _farthest_pos6 < _pos:
        _farthest_pos6 = _pos
        _farthest_expr6 = 140289069460784
    _pos = _backtrack9
    _result = _farthest_expr6
    _pos = _farthest_pos6
    label ._end_choice6
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_KeywordArg1(_text, _pos):
    _mode, _result, _pos = yield (3, _parse_Name1, _pos)
    if not _mode:
        goto ._end_discard16
    _staging13 = _result
    _backtrack10 = _pos
    _farthest_pos7 = _pos
    _farthest_expr7 = 140289069490696
    _value20 = '='
    _end20 = _pos + 1
    if _text[_pos:_end20] == _value20:
        _pos = _end20
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value20
    else:
        _mode = False
        _result = 140289069490584
    if _mode:
        goto ._end_choice7
    if _farthest_pos7 < _pos:
        _farthest_pos7 = _pos
        _farthest_expr7 = 140289069490584
    _pos = _backtrack10
    _value21 = ':'
    _end21 = _pos + 1
    if _text[_pos:_end21] == _value21:
        _pos = _end21
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value21
    else:
        _mode = False
        _result = 140289069490640
    if _mode:
        goto ._end_choice7
    if _farthest_pos7 < _pos:
        _farthest_pos7 = _pos
        _farthest_expr7 = 140289069490640
    _pos = _backtrack10
    _result = _farthest_expr7
    _pos = _farthest_pos7
    label ._end_choice7
    if _mode:
        _result = _staging13
    label ._end_discard16
    if not _mode:
        goto ._end_sequence10
    name = _result
    _mode, _result, _pos = yield (3, _parse_Expr1, _pos)
    if not _mode:
        goto ._end_sequence10
    expr = _result
    _result = KeywordArg(name, expr)
    label ._end_sequence10
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_ArgList1(_text, _pos):
    _value22 = '('
    _end22 = _pos + 1
    if _text[_pos:_end22] == _value22:
        _pos = _end22
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value22
    else:
        _mode = False
        _result = 140289069491032
    if not _mode:
        goto ._end_discard17
    _staging14 = []
    _checkpoint7 = _pos
    label ._loop_alt4
    
    @_with_goto
    def _arg13(_text, _pos):
        _backtrack11 = _pos
        _farthest_pos8 = _pos
        _farthest_expr8 = 140289069491536
        _mode, _result, _pos = yield (3, _parse_KeywordArg1, _pos)
        if _mode:
            goto ._end_choice8
        if _farthest_pos8 < _pos:
            _farthest_pos8 = _pos
            _farthest_expr8 = 140289069491424
        _pos = _backtrack11
        _mode, _result, _pos = yield (3, _parse_Expr1, _pos)
        if _mode:
            goto ._end_choice8
        if _farthest_pos8 < _pos:
            _farthest_pos8 = _pos
            _farthest_expr8 = 140289069491480
        _pos = _backtrack11
        _result = _farthest_expr8
        _pos = _farthest_pos8
        label ._end_choice8
        yield (_mode, _result, _pos)

    _closure15 = _RuleClosure(_parse_wrap1, (_arg13,), ())
    _mode, _result, _pos = yield (3, _closure15, _pos)
    if not _mode:
        goto ._end_alt4
    _staging14.append(_result)
    _checkpoint7 = _pos
    _mode, _result, _pos = yield (3, _parse_Comma1, _pos)
    if not _mode:
        goto ._end_alt4
    _checkpoint7 = _pos
    goto ._loop_alt4
    label ._end_alt4
    _mode = True
    _result = _staging14
    _pos = _checkpoint7
    label ._end_discard17
    if not _mode:
        goto ._end_discard18
    _staging15 = _result
    _value23 = ')'
    _end23 = _pos + 1
    if _text[_pos:_end23] == _value23:
        _pos = _end23
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value23
    else:
        _mode = False
        _result = 140289069490976
    if _mode:
        _result = _staging15
    label ._end_discard18
    if not _mode:
        goto ._end_sequence11
    args = _result
    _result = ArgList(args)
    label ._end_sequence11
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_Expr1(_text, _pos):
    _staging16 = None
    _checkpoint8 = _pos
    _is_first1 = True
    goto ._left_assoc_operand1
    label ._loop_left_assoc1
    
    @_with_goto
    def _arg14(_text, _pos):
        _value24 = '|'
        _end24 = _pos + 1
        if _text[_pos:_end24] == _value24:
            _pos = _end24
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value24
        else:
            _mode = False
            _result = 140289069493720
        yield (_mode, _result, _pos)

    _wrapper10 = _StringLiteral('|')
    _wrapper10._parse_function = _arg14
    _closure16 = _RuleClosure(_parse_wrap1, (_wrapper10,), ())
    _mode, _result, _pos = yield (3, _closure16, _pos)
    if not _mode:
        goto ._suceed_left_assoc1
    _operator1 = _result
    label ._left_assoc_operand1
    _staging17 = None
    _checkpoint9 = _pos
    _is_first2 = True
    goto ._left_assoc_operand2
    label ._loop_left_assoc2
    
    @_with_goto
    def _arg15(_text, _pos):
        _backtrack12 = _pos
        _farthest_pos9 = _pos
        _farthest_expr9 = 140289069493608
        _value25 = '<|'
        _end25 = _pos + 2
        if _text[_pos:_end25] == _value25:
            _pos = _end25
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value25
        else:
            _mode = False
            _result = 140289069493440
        if _mode:
            goto ._end_choice9
        if _farthest_pos9 < _pos:
            _farthest_pos9 = _pos
            _farthest_expr9 = 140289069493440
        _pos = _backtrack12
        _value26 = '|>'
        _end26 = _pos + 2
        if _text[_pos:_end26] == _value26:
            _pos = _end26
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value26
        else:
            _mode = False
            _result = 140289069493496
        if _mode:
            goto ._end_choice9
        if _farthest_pos9 < _pos:
            _farthest_pos9 = _pos
            _farthest_expr9 = 140289069493496
        _pos = _backtrack12
        _value27 = 'where'
        _end27 = _pos + 5
        if _text[_pos:_end27] == _value27:
            _pos = _end27
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value27
        else:
            _mode = False
            _result = 140289069493384
        if _mode:
            goto ._end_choice9
        if _farthest_pos9 < _pos:
            _farthest_pos9 = _pos
            _farthest_expr9 = 140289069493384
        _pos = _backtrack12
        _result = _farthest_expr9
        _pos = _farthest_pos9
        label ._end_choice9
        yield (_mode, _result, _pos)

    _closure17 = _RuleClosure(_parse_wrap1, (_arg15,), ())
    _mode, _result, _pos = yield (3, _closure17, _pos)
    if not _mode:
        goto ._suceed_left_assoc2
    _operator2 = _result
    label ._left_assoc_operand2
    _staging18 = None
    _checkpoint10 = _pos
    _is_first3 = True
    goto ._left_assoc_operand3
    label ._loop_left_assoc3
    
    @_with_goto
    def _arg16(_text, _pos):
        _backtrack13 = _pos
        _farthest_pos10 = _pos
        _farthest_expr10 = 140289069493160
        _value28 = '<<'
        _end28 = _pos + 2
        if _text[_pos:_end28] == _value28:
            _pos = _end28
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value28
        else:
            _mode = False
            _result = 140289069493048
        if _mode:
            goto ._end_choice10
        if _farthest_pos10 < _pos:
            _farthest_pos10 = _pos
            _farthest_expr10 = 140289069493048
        _pos = _backtrack13
        _value29 = '>>'
        _end29 = _pos + 2
        if _text[_pos:_end29] == _value29:
            _pos = _end29
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value29
        else:
            _mode = False
            _result = 140289069493104
        if _mode:
            goto ._end_choice10
        if _farthest_pos10 < _pos:
            _farthest_pos10 = _pos
            _farthest_expr10 = 140289069493104
        _pos = _backtrack13
        _result = _farthest_expr10
        _pos = _farthest_pos10
        label ._end_choice10
        yield (_mode, _result, _pos)

    _closure18 = _RuleClosure(_parse_wrap1, (_arg16,), ())
    _mode, _result, _pos = yield (3, _closure18, _pos)
    if not _mode:
        goto ._suceed_left_assoc3
    _operator3 = _result
    label ._left_assoc_operand3
    _staging19 = None
    _checkpoint11 = _pos
    _is_first4 = True
    goto ._left_assoc_operand4
    label ._loop_left_assoc4
    
    @_with_goto
    def _arg17(_text, _pos):
        _backtrack14 = _pos
        _farthest_pos11 = _pos
        _farthest_expr11 = 140289069492824
        _value30 = '//'
        _end30 = _pos + 2
        if _text[_pos:_end30] == _value30:
            _pos = _end30
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value30
        else:
            _mode = False
            _result = 140289069492712
        if _mode:
            goto ._end_choice11
        if _farthest_pos11 < _pos:
            _farthest_pos11 = _pos
            _farthest_expr11 = 140289069492712
        _pos = _backtrack14
        _value31 = '/'
        _end31 = _pos + 1
        if _text[_pos:_end31] == _value31:
            _pos = _end31
            _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
            _mode = True
            _result = _value31
        else:
            _mode = False
            _result = 140289069492768
        if _mode:
            goto ._end_choice11
        if _farthest_pos11 < _pos:
            _farthest_pos11 = _pos
            _farthest_expr11 = 140289069492768
        _pos = _backtrack14
        _result = _farthest_expr11
        _pos = _farthest_pos11
        label ._end_choice11
        yield (_mode, _result, _pos)

    _closure19 = _RuleClosure(_parse_wrap1, (_arg17,), ())
    _mode, _result, _pos = yield (3, _closure19, _pos)
    if not _mode:
        goto ._suceed_left_assoc4
    _operator4 = _result
    label ._left_assoc_operand4
    _mode, _result, _pos = yield (3, _parse_Atom1, _pos)
    if not _mode:
        goto ._end_postfix1
    _staging20 = _result
    _checkpoint12 = _pos
    label ._loop_postfix1
    _mode, _result, _pos = yield (3, _parse_ArgList1, _pos)
    if _mode:
        _staging20 = Postfix(_staging20, _result)
        _checkpoint12 = _pos
        goto ._loop_postfix1
    else:
        _mode = True
        _result = _staging20
        _pos = _checkpoint12
    label ._end_postfix1
    if not _mode:
        goto ._end_postfix2
    _staging21 = _result
    _checkpoint13 = _pos
    label ._loop_postfix2
    _backtrack15 = _pos
    _farthest_pos12 = _pos
    _farthest_expr12 = 140289069492432
    _value32 = '?'
    _end32 = _pos + 1
    if _text[_pos:_end32] == _value32:
        _pos = _end32
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value32
    else:
        _mode = False
        _result = 140289069492264
    if _mode:
        goto ._end_choice12
    if _farthest_pos12 < _pos:
        _farthest_pos12 = _pos
        _farthest_expr12 = 140289069492264
    _pos = _backtrack15
    _value33 = '*'
    _end33 = _pos + 1
    if _text[_pos:_end33] == _value33:
        _pos = _end33
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value33
    else:
        _mode = False
        _result = 140289069492320
    if _mode:
        goto ._end_choice12
    if _farthest_pos12 < _pos:
        _farthest_pos12 = _pos
        _farthest_expr12 = 140289069492320
    _pos = _backtrack15
    _value34 = '+'
    _end34 = _pos + 1
    if _text[_pos:_end34] == _value34:
        _pos = _end34
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _value34
    else:
        _mode = False
        _result = 140289069492208
    if _mode:
        goto ._end_choice12
    if _farthest_pos12 < _pos:
        _farthest_pos12 = _pos
        _farthest_expr12 = 140289069492208
    _pos = _backtrack15
    _result = _farthest_expr12
    _pos = _farthest_pos12
    label ._end_choice12
    if _mode:
        _staging21 = Postfix(_staging21, _result)
        _checkpoint13 = _pos
        goto ._loop_postfix2
    else:
        _mode = True
        _result = _staging21
        _pos = _checkpoint13
    label ._end_postfix2
    if not _mode:
        if _is_first4:
            goto ._end_left_assoc4
        else:
            goto ._suceed_left_assoc4
    _checkpoint11 = _pos
    if _is_first4:
        _is_first4 = False
        _staging19 = _result
    else:
        _staging19 = Infix(_staging19, _operator4, _result)
    goto ._loop_left_assoc4
    label ._suceed_left_assoc4
    _mode = True
    _result = _staging19
    _pos = _checkpoint11
    label ._end_left_assoc4
    if not _mode:
        if _is_first3:
            goto ._end_left_assoc3
        else:
            goto ._suceed_left_assoc3
    _checkpoint10 = _pos
    if _is_first3:
        _is_first3 = False
        _staging18 = _result
    else:
        _staging18 = Infix(_staging18, _operator3, _result)
    goto ._loop_left_assoc3
    label ._suceed_left_assoc3
    _mode = True
    _result = _staging18
    _pos = _checkpoint10
    label ._end_left_assoc3
    if not _mode:
        if _is_first2:
            goto ._end_left_assoc2
        else:
            goto ._suceed_left_assoc2
    _checkpoint9 = _pos
    if _is_first2:
        _is_first2 = False
        _staging17 = _result
    else:
        _staging17 = Infix(_staging17, _operator2, _result)
    goto ._loop_left_assoc2
    label ._suceed_left_assoc2
    _mode = True
    _result = _staging17
    _pos = _checkpoint9
    label ._end_left_assoc2
    if not _mode:
        if _is_first1:
            goto ._end_left_assoc1
        else:
            goto ._suceed_left_assoc1
    _checkpoint8 = _pos
    if _is_first1:
        _is_first1 = False
        _staging16 = _result
    else:
        _staging16 = Infix(_staging16, _operator1, _result)
    goto ._loop_left_assoc1
    label ._suceed_left_assoc1
    _mode = True
    _result = _staging16
    _pos = _checkpoint8
    label ._end_left_assoc1
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse_start1(_text, _pos):
    _checkpoint14 = _pos
    label ._loop_skip3
    _mode, _result, _pos = yield (3, _parse_Newline1, _pos)
    if _mode:
        _checkpoint14 = _pos
        goto ._loop_skip3
    _mode = True
    _result = None
    _pos = _checkpoint14
    if not _mode:
        goto ._end_discard19
    _staging22 = []
    _checkpoint15 = _pos
    label ._loop_alt5
    _mode, _result, _pos = yield (3, _parse_Stmt1, _pos)
    if not _mode:
        goto ._end_alt5
    _staging22.append(_result)
    _checkpoint15 = _pos
    _mode, _result, _pos = yield (3, _parse_Sep1, _pos)
    if not _mode:
        goto ._end_alt5
    _checkpoint15 = _pos
    goto ._loop_alt5
    label ._end_alt5
    _mode = True
    _result = _staging22
    _pos = _checkpoint15
    label ._end_discard19
    yield (_mode, _result, _pos)
    

@_with_goto
def _parse__ignored1(_text, _pos):
    _checkpoint16 = _pos
    label ._loop_skip4
    _match12 = _pattern1.match(_text, _pos)
    if _match12:
        _pos = _match12.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match12.group(0)
    else:
        _mode = False
        _result = 140289060440496
    if _mode:
        _checkpoint16 = _pos
        goto ._loop_skip4
    _match13 = _pattern2.match(_text, _pos)
    if _match13:
        _pos = _match13.end()
        _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
        _mode = True
        _result = _match13.group(0)
    else:
        _mode = False
        _result = 140289060332824
    if _mode:
        _checkpoint16 = _pos
        goto ._loop_skip4
    _mode = True
    _result = None
    _pos = _checkpoint16
    yield (_mode, _result, _pos)
    

@_with_goto
def _skip_then_start(_text, _pos):
    _mode, _result, _pos = yield (3, _parse__ignored1, _pos)
    if not _mode:
        goto ._end_discard20
    _mode, _result, _pos = yield (3, _parse_start1, _pos)
    label ._end_discard20
    yield (_mode, _result, _pos)
    
